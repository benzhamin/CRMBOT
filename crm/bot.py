import asyncio
import os
import sys
from django.core.management.base import BaseCommand
from aiogram import Bot, Dispatcher, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup
from asgiref.sync import sync_to_async
from django.conf import settings
from crm.models import Product, Order, Admins

import os
import django
from dotenv import load_dotenv
import logging
import random

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'server.settings')
django.setup()


load_dotenv()
logging.basicConfig(filename='bot.log', level=logging.INFO)
chat_id = os.getenv("CHAT_ID")

bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher(storage=MemoryStorage())



# Define states
class OrderStates(StatesGroup):
    product = State()
    waiting_for_amount = State()
    waiting_for_comment = State()




@sync_to_async
def get_admins():
    return list(Admins.objects.values_list('adminnumber', flat=True))

@sync_to_async
def create_product(product_name, amount):
    return Product.objects.create(product_name=product_name, amount=int(amount))

@sync_to_async
def get_all_products():
    return list(Product.objects.all().order_by('product_name'))

@sync_to_async
def get_product_by_id(product_id):
    return Product.objects.filter(id=product_id).first()

@sync_to_async
def create_order(product_id, amount, order_type, comment):
    product = Product.objects.get(id=product_id)
    return Order.objects.create(product=product, amount=amount, order_type=order_type, comment=comment)

@sync_to_async
def update_product_amount(product_id, amount, order_type):
    product = Product.objects.get(id=product_id)
    if order_type == "buy":
        product.amount = int(product.amount) + amount
    else:
        product.amount = int(product.amount) - amount
    product.save()
    return product

@dp.message(F.text == '/start')
async def start(message: Message):
    admins = await get_admins()
    if message.from_user.id not in admins:

        print(f"Unauthorized access attempt by user ID: {message.from_user.id}")
        return
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–†–û–î–ê–ñ–ê üí∞")],
            [KeyboardButton(text="–û–°–¢–ê–¢–û–ö üì¶")],
            [KeyboardButton(text="–ó–ê–ö–£–ü–ö–ê üõí")],
            [KeyboardButton(text="–î–û–ë–ê–í–ò–¢–¨ –¢–û–í–ê–† ‚ûï")]
        ],
        resize_keyboard=True,
        row_width=2,
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=markup)

@dp.message(F.text == '–î–û–ë–ê–í–ò–¢–¨ –¢–û–í–ê–† ‚ûï')
async def add_product(message: Message, state: FSMContext):
    admins = await get_admins()
    if message.from_user.id not in admins:
        print(f"Unauthorized access attempt by user ID: {message.from_user.id}")
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç üì¶:")
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç üì¶ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚ûï (—Ñ–æ—Ä–º–∞—Ç: –ø—Ä–æ–¥—É–∫—Ç,–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)')
    await state.set_state(OrderStates.product)

@dp.message(OrderStates.product)
async def process_add_product(message: Message, state: FSMContext):
    try:
        text = message.text.split(',')
        if len(text) != 2:
            await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ø—Ä–æ–¥—É–∫—Ç,–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')
            return
        product_name, amount = text[0].strip(), text[1].strip()
        await create_product(product_name, amount)
        await message.answer('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ')
        await state.clear()
    except ValueError:
        await message.answer('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.')
    except Exception as e:
        await message.answer(f'–û—à–∏–±–∫–∞: {str(e)}')

@dp.message(F.text == '–û–°–¢–ê–¢–û–ö üì¶')
async def product_remains(message: Message):
    admins = await get_admins()
    if message.from_user.id not in admins:
        print(f"Unauthorized access attempt by user ID: {message.from_user.id}")
        return
    try:
        products = await get_all_products()
        if not products:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.")
            return
        product_list = "\n".join(f"{p.product_name} - {p.amount}–ö" for p in products)
        await message.answer(product_list)
    except Exception as e:
        await message.answer(f'–û—à–∏–±–∫–∞: {str(e)}')

@dp.message(F.text.in_(["–ü–†–û–î–ê–ñ–ê üí∞", "–ó–ê–ö–£–ü–ö–ê üõí"]))
async def make_order(message: Message, state: FSMContext):
    admins = await get_admins()
    if message.from_user.id not in admins:
        print(f"Unauthorized access attempt by user ID: {message.from_user.id}")
        return
    
    global order_type
    order_type = "buy" if message.text == "–ó–ê–ö–£–ü–ö–ê üõí" else "sell"
    try:
        products = await get_all_products()
        if not products:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.")
            return
        keyboard = [[InlineKeyboardButton(text=p.product_name, callback_data=f"product_{p.id}")] for p in products]
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç üì¶:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
    except Exception as e:
        await message.answer(f'–û—à–∏–±–∫–∞: {str(e)}')

@dp.callback_query(F.data.startswith('product_'))
async def process_product_selection(callback_query, state: FSMContext):
    try:
        global product_id
        product_id = int(callback_query.data.split('_')[1])
        product = await get_product_by_id(product_id)
        if not product:
            await callback_query.message.answer("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        await callback_query.message.answer(f"–ü—Ä–æ–¥—É–∫—Ç üì¶: {product.product_name}")
        await callback_query.message.delete()
        global amount_message
        amount_message = await callback_query.message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
        await state.set_state(OrderStates.waiting_for_amount)
    except Exception as e:
        await callback_query.message.answer(f'–û—à–∏–±–∫–∞: {str(e)}')

@dp.message(OrderStates.waiting_for_amount)
async def process_amount(message: Message, state: FSMContext):
    try:
        global amount 
        amount = int(message.text)
        await bot.delete_message(chat_id=message.chat.id, message_id=amount_message.message_id)
        await message.delete()
        await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount}–ö")
        global comment_message
        comment_message = await message.answer("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π üìù:")
        await state.set_state(OrderStates.waiting_for_comment)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.")
    except Exception as e:
        await message.answer(f'–û—à–∏–±–∫–∞: {str(e)}')

@dp.message(OrderStates.waiting_for_comment)
async def process_comment(message: Message, state: FSMContext):
    try:
        global comment
        global text_message
        comment = message.text
        await bot.delete_message(chat_id=message.chat.id, message_id=comment_message.message_id)
        await message.delete()
        await message.answer(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π üìù: {comment}")
        product = await get_product_by_id(product_id)
        x = "–ó–ê–ö–£–ü–ö–ê üõí" if order_type == "buy" else ""
        text_message = f"{x}{amount}–ö {product.product_name} {comment}"
        await state.update_data(text_message=text_message)
        keyboard = [
            [InlineKeyboardButton(text="–î–∞ ‚úÖ", callback_data="confirm_yes"),
             InlineKeyboardButton(text="–ù–µ—Ç ‚ùå", callback_data="confirm_no")]
        ]
        await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ?", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
        await state.clear()
    except Exception as e:
        await message.answer(f'–û—à–∏–±–∫–∞: {str(e)}')

@dp.callback_query(F.data.startswith('confirm_'))
async def process_confirmation(callback_query, state: FSMContext):
    try:
        if callback_query.data == "confirm_yes":
            await create_order(product_id, amount, order_type, comment)
            await update_product_amount(product_id, amount, order_type)
            await callback_query.message.answer("–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚úÖ")
            await bot.send_message(chat_id=chat_id, text=text_message)
        else:
            await callback_query.message.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω ‚ùå")

        await callback_query.message.edit_reply_markup(reply_markup=None)
        await callback_query.message.delete()
    except Exception as e:
        await callback_query.message.answer(f'–û—à–∏–±–∫–∞: {str(e)}')

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())